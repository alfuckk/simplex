// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"simplex/app/auth/internal/hdl"
	"simplex/app/auth/internal/repo"
	"simplex/app/auth/internal/srv"
	"simplex/app/auth/internal/svc"
	"simplex/pkg/app"
	"simplex/pkg/jwt"
	"simplex/pkg/logx"
	"simplex/pkg/serv/http_serv"
	"simplex/pkg/sid"
	"simplex/repository"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *logx.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handler := hdl.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	repositoryRepository := repository.NewRepository(logger, db)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	service := svc.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repo.NewUserRepository(repositoryRepository)
	userService := svc.NewUserService(service, userRepository)
	userHandler := hdl.NewUserHandler(handler, userService)
	server := srv.NewHTTPServer(logger, viperViper, jwtJWT, userHandler)
	appApp := newApp(server)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRepository, repository.NewTransaction, repo.NewUserRepository)

var serviceSet = wire.NewSet(svc.NewService, svc.NewUserService)

var handlerSet = wire.NewSet(hdl.NewHandler, hdl.NewUserHandler)

var serverSet = wire.NewSet(srv.NewHTTPServer)

// build App
func newApp(
	httpServer *http_serv.Server,

) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName("user-server"))
}
